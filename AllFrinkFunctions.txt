// Last updated 2020-04-01
// Full list of functions in Frink

newJava[arg1, arg2=[]]
callByName[arg1, arg2, arg3=[]]
staticJava[arg1, arg2, arg3=true]
newJavaArray[arg1, arg2]
callJava[arg1, arg2, arg3=[]]
subtractLeap[arg1, arg2]
lengthOfDayLeap[arg1, arg2=undef]
beginningOfNextDay[arg1, arg2=undef]
beginningOfHour[arg1, arg2=undef]
parseDate[arg1]
beginningOfPreviousYear[arg1, arg2=undef]
beginningOfPreviousMillisecond[arg1, arg2=undef]
beginningOfMinutePlus[arg1, arg2, arg3=undef]
JD[arg1]
beginningOfYearPlus[arg1, arg2, arg3=undef]
beginningOfHourPlus[arg1, arg2, arg3=undef]
setDefaultTimezone[arg1]
addLeap[arg1, arg2]
lengthOfYear[arg1, arg2=undef]
MJD[arg1]
beginningOfNextMonth[arg1, arg2=undef]
beginningOfMonthPlus[arg1, arg2, arg3=undef]
beginningOfNextSecond[arg1, arg2=undef]
timezone[]
beginningOfSecond[arg1, arg2=undef]
beginningOfMillisecond[arg1, arg2=undef]
timezones[]
timezones[arg1]
deltaT[arg1]
beginningOfNextMillisecond[arg1, arg2=undef]
beginningOfMillisecondPlus[arg1, arg2, arg3=undef]
beginningOfMonth[arg1, arg2=undef]
beginningOfPreviousDay[arg1, arg2=undef]
beginningOfDay[arg1, arg2=undef]
beginningOfPreviousHour[arg1, arg2=undef]
lengthOfMonthLeap[arg1, arg2=undef]
lengthOfDay[arg1, arg2=undef]
beginningOfPreviousMinute[arg1, arg2=undef]
beginningOfPreviousMonth[arg1, arg2=undef]
JDE[arg1]
lengthOfYearLeap[arg1, arg2=undef]
TAIMinusUTC[arg1]
beginningOfNextYear[arg1, arg2=undef]
beginningOfYear[arg1, arg2=undef]
beginPlusOffset[arg1, arg2, arg3=0, arg4=undef]
lengthOfMonth[arg1, arg2=undef]
beginningOfDayPlus[arg1, arg2, arg3=undef]
now[]
beginningOfPreviousSecond[arg1, arg2=undef]
beginningOfNextMinute[arg1, arg2=undef]
beginningOfSecondPlus[arg1, arg2, arg3=undef]
beginningOfMinute[arg1, arg2=undef]
beginningOfNextHour[arg1, arg2=undef]
gunzip[arg1]
readLines[arg1]
lines[arg1]
lines[arg1, arg2]
fileURLs[arg1]
gzip[arg1]
base64DecodeToBytes[arg1]
urlFile[arg1]
url[arg1, arg2]
files[arg1]
filesRecursive[arg1]
urlProtocol[arg1]
base64Encode[arg1, arg2]
base64Encode[arg1, arg2, arg3]
filenameToURL[arg1]
fileURLsRecursive[arg1]
browse[arg1]
copyStream[arg1, arg2]
read[arg1]
read[arg1, arg2]
base64Decode[arg1, arg2]
urlHost[arg1]
urlPath[arg1]
KoreanToEnglish[arg1]
francés[arg1]
SimplifiedChineseToEnglish[arg1]
Arabic[arg1]
FromArabic[arg1]
EnglishToItalian[arg1]
en_ko[arg1]
Anglais[arg1]
ko[arg1]
ko_en[arg1]
EnglishToKorean[arg1]
Italiano[arg1]
English[arg1]
Inglese[arg1]
SpanishToEnglish[arg1]
el_en[arg1]
EnglishToGreek[arg1]
from_ko[arg1]
fr_es[arg1]
FromSimplifiedChinese[arg1]
fr_en[arg1]
TraditionalChineseToEnglish[arg1]
EnglishToDutch[arg1]
ChineseToEnglish[arg1]
Korean[arg1]
FromSpanish[arg1]
SwedishToEnglish[arg1]
en_ja[arg1]
ArabicToEnglish[arg1]
FrenchToPortuguese[arg1]
ja[arg1]
PortugueseToFrench[arg1]
FromChinese[arg1]
FrenchToSpanish[arg1]
en_it[arg1]
Russian[arg1]
allemand[arg1]
it[arg1]
EnglishToSimplifiedChinese[arg1]
fr_pt[arg1]
Espanol[arg1]
from_ja[arg1]
fr_de[arg1]
Portuguese[arg1]
FromKorean[arg1]
from_it[arg1]
PolishToEnglish[arg1]
EnglishToSwedish[arg1]
ja_en[arg1]
EnglishToPortuguese[arg1]
zh_en[arg1]
espagnol[arg1]
Engelska[arg1]
sv_en[arg1]
Englisch[arg1]
Français[arg1]
portugais[arg1]
en_sv[arg1]
ru_en[arg1]
EnglishToFrench[arg1]
sv[arg1]
Italien[arg1]
Frances[arg1]
FromItalian[arg1]
from_sv[arg1]
en_fr[arg1]
αγγλικά[arg1]
Japanese[arg1]
FrenchToItalian[arg1]
fr[arg1]
en_ru[arg1]
Svenska[arg1]
Spanish[arg1]
ru[arg1]
franzoesisch[arg1]
EnglishToTraditionalChinese[arg1]
Chinese[arg1]
from_fr[arg1]
Französisch[arg1]
EnglishToRussian[arg1]
Español[arg1]
en_es[arg1]
from_ru[arg1]
es_fr[arg1]
ar_en[arg1]
es[arg1]
TraditionalChinese[arg1]
francese[arg1]
en_el[arg1]
FromGreek[arg1]
en[arg1]
GermanToEnglish[arg1]
FromPortuguese[arg1]
el[arg1]
French[arg1]
FromFrench[arg1]
nl_en[arg1]
FromJapanese[arg1]
FromDutch[arg1]
Allemand[arg1]
from_es[arg1]
EnglishToPolish[arg1]
JapaneseToEnglish[arg1]
from_en[arg1]
from_el[arg1]
FromTraditionalChinese[arg1]
it_fr[arg1]
es_en[arg1]
en_pt[arg1]
Ingles[arg1]
pt[arg1]
en_de[arg1]
pt_fr[arg1]
Francês[arg1]
de[arg1]
en_pl[arg1]
GreekToEnglish[arg1]
pl[arg1]
Polish[arg1]
FromSwedish[arg1]
Engels[arg1]
from_pt[arg1]
Espagnol[arg1]
from_de[arg1]
italien[arg1]
DutchToEnglish[arg1]
GermanToFrench[arg1]
it_en[arg1]
frances[arg1]
from_pl[arg1]
Francés[arg1]
Francais[arg1]
ItalianToFrench[arg1]
Italian[arg1]
pt_en[arg1]
FromPolish[arg1]
FrenchToGerman[arg1]
FromEnglish[arg1]
EnglishToJapanese[arg1]
de_fr[arg1]
fr_it[arg1]
EnglishToGerman[arg1]
EnglishToSpanish[arg1]
FrenchToEnglish[arg1]
Franzoesisch[arg1]
en_nl[arg1]
Greek[arg1]
Deutsch[arg1]
en_zt[arg1]
nl[arg1]
SimplifiedChinese[arg1]
zt[arg1]
Dutch[arg1]
ItalianToEnglish[arg1]
en_ar[arg1]
RussianToEnglish[arg1]
en_zh[arg1]
ar[arg1]
zh[arg1]
Inglês[arg1]
de_en[arg1]
EnglishToArabic[arg1]
from_nl[arg1]
PortugueseToEnglish[arg1]
from_zt[arg1]
FromRussian[arg1]
EnglishToChinese[arg1]
from_ar[arg1]
from_zh[arg1]
zt_en[arg1]
Francese[arg1]
Portugais[arg1]
francês[arg1]
engelska[arg1]
Inglés[arg1]
German[arg1]
SpanishToFrench[arg1]
FromGerman[arg1]
Nederlands[arg1]
Swedish[arg1]
französisch[arg1]
pl_en[arg1]
decimal[arg1]
acosh[arg1]
nextPrime[arg1]
sec[arg1]
secant[arg1]
csc[arg1]
modDiv[arg1, arg2, arg3]
factor[arg1]
tangent[arg1]
integerDigits[arg1]
integerDigits[arg1, arg2]
trinary[arg1]
previousPrime[arg1]
senary[arg1]
factorialRatio[arg1, arg2]
isNegative[arg1]
arctan[arg1]
arctan[arg1, arg2]
Re[arg1]
arg[arg1]
base36[arg1]
base35[arg1]
base34[arg1]
base33[arg1]
base32[arg1]
base31[arg1]
eulerTotient[arg1]
base30[arg1]
ternary[arg1]
numerator[arg1, arg2=true, arg3=true]
oct[arg1]
round[arg1]
round[arg1, arg2]
binomial[arg1, arg2]
septendecimal[arg1]
denary[arg1]
base29[arg1]
base28[arg1]
base27[arg1]
base26[arg1]
base25[arg1]
base24[arg1]
denominator[arg1, arg2=true, arg3=true]
base23[arg1]
base22[arg1]
sech[arg1]
tridecimal[arg1]
sexadecimal[arg1]
base21[arg1]
base20[arg1]
atanh[arg1]
isUnit[arg1]
ceil[arg1]
ceil[arg1, arg2]
trunc[arg1]
acsch[arg1]
base19[arg1]
realSignum[arg1]
magnitude[arg1]
coth[arg1]
base18[arg1]
base[arg1, arg2]
base17[arg1]
base16[arg1]
supremum[arg1]
gcd[arg1, arg2]
base15[arg1]
sinh[arg1]
base14[arg1]
base13[arg1]
base12[arg1]
sine[arg1]
base11[arg1]
hexadecimal[arg1]
sinc[arg1]
base10[arg1]
isInterval[arg1]
cot[arg1]
arcsec[arg1]
cos[arg1]
cosecant[arg1]
arccsc[arg1]
toRational[arg1]
inv[arg1]
acos[arg1]
int[arg1]
collapseIntervals[arg1]
cosh[arg1]
product[arg1]
product[arg1, arg2]
bitOr[arg1, arg2]
numeratorDenominator[arg1, arg2=true, arg3=true]
isPositive[arg1]
abs[arg1]
duodecimal[arg1]
eulerPhi[arg1]
factorFlat[arg1]
duodenary[arg1]
modPow[arg1, arg2, arg3]
shiftLeft[arg1, arg2]
vigesimal[arg1]
FFT[arg1, arg2=-1, arg3=1]
approxLog2[arg1]
DFT[arg1, arg2=-1, arg3=1]
cosine[arg1]
arcsech[arg1]
primes[]
primes[arg1]
primes[arg1, arg2]
base9[arg1]
getLowestSetBit[arg1]
base8[arg1]
bitAnd[arg1, arg2]
base7[arg1]
base6[arg1]
base5[arg1]
base4[arg1]
base3[arg1]
bitNand[arg1, arg2]
base2[arg1]
nonadecimal[arg1]
recip[arg1]
binary[arg1]
partitionsCompact[arg1, arg2=false]
octodecimal[arg1]
hex[arg1]
arccoth[arg1]
exp[arg1]
arcsinh[arg1]
tanh[arg1]
binaryToGray[arg1]
signum[arg1]
isRational[arg1]
septenary[arg1]
arccot[arg1]
arccos[arg1]
csch[arg1]
quindecimal[arg1]
InverseFFT[arg1, arg2=-1, arg3=1]
arccosh[arg1]
InverseDFT[arg1, arg2=-1, arg3=1]
cotangent[arg1]
sin[arg1]
octonary[arg1]
quaternary[arg1]
asin[arg1]
sexenary[arg1]
bitXor[arg1, arg2]
sum[arg1]
sum[arg1, arg2]
lcm[arg1, arg2]
mignitude[arg1]
partitions[arg1]
JacobiSymbol[arg1, arg2]
divideAndRemainder[arg1, arg2]
mainValue[arg1]
infimum[arg1]
modInverse[arg1, arg2]
log[arg1]
log[arg1, arg2]
bitNot[arg1]
isInteger[arg1]
bitNor[arg1, arg2]
conjugate[arg1]
isStrongPseudoprime[arg1, arg2]
grayToBinary[arg1]
tan[arg1]
Im[arg1]
inverseFFT[arg1, arg2=-1, arg3=1]
atan[arg1]
atan[arg1, arg2]
inverseDFT[arg1, arg2=-1, arg3=1]
isReal[arg1]
floor[arg1]
floor[arg1, arg2]
sqrt[arg1]
asech[arg1]
arctanh[arg1]
factorial[arg1]
quinary[arg1]
base64[arg1]
reciprocal[arg1]
truncate[arg1]
arccsch[arg1]
isPrime[arg1]
quattuordecimal[arg1]
isComplex[arg1]
acoth[arg1]
asinh[arg1]
partitionCount[arg1]
undenary[arg1]
ceiling[arg1]
nonary[arg1]
arcsin[arg1]
octal[arg1]
ln[arg1]
toUnicodeSubscript[arg1]
shiftRight[arg1, arg2]
toUnicodeSuperscript[arg1]
clamp[arg1, arg2, arg3]
hashCode[arg1]
println[]
println[arg1]
childCount[arg1]
format[arg1, arg2]
format[arg1, arg2, arg3]
formatFixed[arg1, arg2, arg3]
showDimensionName[arg1]
randomBytes[arg1]
messageDigest[arg1, arg2]
getFunction[arg1, arg2]
split[arg1, arg2]
outputForm[arg1]
sleep[arg1]
length[arg1]
zip[arg1, arg2]
zip[arg1, arg2, arg3, arg4]
constructExpression[arg1, arg2]
setPrecision[arg1]
union[arg1, arg2]
isFunction[arg1]
toString[arg1]
unitsWithValues[]
unitsWithValues[arg1]
readStdin[]
array[arg1]
removeSliceLength[arg1, arg2, arg3]
substrRaw[arg1, arg2, arg3]
toArray[arg1]
rand[arg1]
rand[arg1, arg2]
child[arg1, arg2]
parseToExpression[arg1]
FrinkVersion[]
sliceLength[arg1, arg2, arg3]
remove[arg1, arg2]
remove[arg1, arg2, arg3]
setDimensionNameDelimiters[arg1, arg2]
type[arg1]
getSymbolsByComplexity[arg1]
children[arg1]
getChildCount[arg1]
slice[arg1, arg2, arg3]
substrLenRaw[arg1, arg2, arg3]
uc[arg1]
transformExpression[arg1]
transformExpression[arg1, arg2]
getSymbols[arg1]
lowercase[arg1]
showApproximations[arg1]
trim[arg1]
charsRaw[arg1]
getFunctionCalls[arg1]
isDate[arg1]
nth[arg1, arg2]
first[arg1]
first[arg1, arg2]
messageDigestInt[arg1, arg2]
max[arg1]
max[arg1, arg2]
lexicalSort[arg1]
lexicalSort[arg1, arg2]
mapList[arg1, arg2]
mapList[arg1, arg2, arg3]
expressionConstructors[]
char[arg1]
map[arg1, arg2]
getPrecision[]
inputForm[arg1]
getChildren[arg1]
oldToString[arg1]
oldToString[arg1, arg2]
parseJSON[arg1]
last[arg1]
last[arg1, arg2]
removeSlice[arg1, arg2, arg3]
formatSci[arg1, arg2, arg3]
subst[arg1, arg2]
subst[arg1, arg2, arg3]
left[arg1, arg2]
substring[arg1, arg2, arg3]
normalizeUnicode[arg1, arg2=NFC]
toASCII[arg1]
input[arg1]
input[arg1, arg2]
right[arg1, arg2]
substringLen[arg1, arg2, arg3]
print[arg1]
reverse[arg1]
isArray[arg1]
makeArray[arg1]
makeArray[arg1, arg2]
methods[arg1]
messageDigestBytes[arg1, arg2]
sentenceList[arg1]
formatFix[arg1, arg2, arg3]
setImaginarySymbol[arg1]
isVariableDefined[arg1]
reverseWords[arg1]
expressionContains[arg1, arg2]
showUndefinedSymbols[arg1]
unit[arg1]
toDict[arg1]
getExponent[arg1, arg2]
formatters[]
dimensions[]
isSet[arg1]
getBoundingBox[arg1]
lexicalCompare[arg1, arg2]
lexicalCompare[arg1, arg2, arg3]
isDict[arg1]
lengthRaw[arg1]
repeat[arg1, arg2]
toSet[arg1]
FrinkGeneration[]
uppercase[arg1]
isSubset[arg1, arg2]
rangeOf[arg1]
substr[arg1, arg2, arg3]
symbolicMode[arg1]
formatEng[arg1, arg2, arg3]
randomGaussian[arg1, arg2]
rest[arg1]
join[arg1, arg2]
keys[arg1]
transformExpressionDebug[arg1]
transformExpressionDebug[arg1, arg2]
editDistanceDamerau[arg1, arg2]
editDistanceDamerau[arg1, arg2, arg3, arg4, arg5, arg6]
isProperSubset[arg1, arg2]
childTypes[arg1]
random[arg1]
random[arg1, arg2]
units[]
units[arg1]
substringRaw[arg1, arg2, arg3]
graphemeLength[arg1]
charList[arg1]
chars[arg1]
randomSeed[arg1]
min[arg1]
min[arg1, arg2]
joinln[arg1]
randomBits[arg1]
padRight[arg1, arg2, arg3]
childrenWithTypes[arg1]
rationalAsFloat[arg1]
editDistance[arg1, arg2]
bitLength[arg1]
padLeft[arg1, arg2, arg3]
intersection[arg1, arg2]
isString[arg1]
splitLines[arg1]
lineBreakList[arg1]
getBit[arg1, arg2]
setEngineering[arg1]
substringLenRaw[arg1, arg2, arg3]
flatten[arg1]
graphemeList[arg1]
regex[arg1]
regex[arg1, arg2]
getChild[arg1, arg2]
setsIntersect[arg1, arg2]
select[arg1, arg2]
select[arg1, arg2, arg3]
functions[]
wordList[arg1]
setDifference[arg1, arg2]
structureEquals[arg1, arg2]
isDefined[arg1]
newToString[arg1]
newToString[arg1, arg2]
substituteExpression[arg1, arg2, arg3]
deepCopy[arg1]
getChildrenWithTypes[arg1]
bytesToString[arg1, arg2=UTF8]
stringToBytes[arg1, arg2=UTF8]
sort[arg1]
sort[arg1, arg2]
sort[arg1, arg2, arg3]
getChildTypes[arg1]
indexOfRaw[arg1, arg2]
indexOfRaw[arg1, arg2, arg3]
dict[]
substrLen[arg1, arg2, arg3]
grayCode[arg1]
grayCode[arg1, arg2]
formatSig[arg1, arg2, arg3]
rawFunctions[]
freeOf[arg1, arg2]
indexOf[arg1, arg2]
indexOf[arg1, arg2, arg3]
transformExpressionTrace[arg1]
transformExpressionTrace[arg1, arg2]
isEnumerating[arg1]
randomFloat[arg1, arg2]
parseInt[arg1]
parseInt[arg1, arg2]
exit[]
isConstant[arg1]
URLEncode[arg1, arg2]
lc[arg1]
C[x]
Richter[n]
sqrtExact[n, digits]
Celsius[x]
HMS[time]
HMS[h, m=0, s=0]
DMS[angle]
DMS[d, m=0, s=0]
Fahrenheit[x]
DHMS[time]
DHMS[d, h=0, m=0, s=0]
allFactors[n, include1=true, includeN=true, sort=true, onlyToSqrt=false]
Reaumur[x]
sqrt[n, digits]
F[x]
DM[angle]